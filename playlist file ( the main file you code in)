package music;

import java.util.*;



/**
 * This class represents a library of song playlists.
 *
 * An ArrayList of Playlist objects represents the various playlists 
 * within one's library.
 * 
 * @author Jeremy Hui
 * @author Vian Miranda
 */
public class PlaylistLibrary {

    private ArrayList<Playlist> songLibrary; // contains various playlists

    /**
     * DO NOT EDIT!
     * Constructor for Library.
     * 
     * @param songLibrary passes in ArrayList of playlists
     */
    public PlaylistLibrary(ArrayList<Playlist> songLibrary) {
        this.songLibrary = songLibrary;
    }

    /**
     * DO NOT EDIT!
     * Default constructor for an empty library. 
     */
    public PlaylistLibrary() {
        this(null);
    }
       
    /**
     * This method reads the songs from an input csv file, and creates a 
     * playlist from it.
     * Each song is on a different line.
     * 
     * 1. Open the file using StdIn.setFile(filename);
     * 
     * 2. Declare a reference that will refer to the last song of the circular linked list.
     * 
     * 3. While there are still lines in the input file:
     *      1. read a song from the file
     *      2. create an object of type Song with the song information
     *      3. Create a SongNode object that holds the Song object from step 3.2.
     *      4. insert the Song object at the END of the circular linked list (use the reference from step 2)
     *      5. increase the count of the number of songs
     * 
     * 4. Create a Playlist object with the reference from step (2) and the number of songs in the playlist
     * 
     * 5. Return the Playlist object
     * 
     * Each line of the input file has the following format:
     *      songName,artist,year,popularity,link
     * 
     * To read a line, use StdIn.readline(), then use .split(",") to extract 
     * fields from the line.
     * 
     * If the playlist is empty, return a Playlist object with null for its last, 
     * and 0 for its size.
     * 
     * The input file has Songs in decreasing popularity order.
     * 
     * DO NOT implement a sorting method, PRACTICE add to end.
     * 
     * @param filename the playlist information input file
     * @return a Playlist object, which contains a reference to the LAST song 
     * in the ciruclar linkedlist playlist and the size of the playlist.
     */
    public Playlist createPlaylist(String filename) {
        
      
        // WRITE YOUR CODE HERE
        StdIn.setFile(filename);
        Playlist newPlaylist = new Playlist(null,0);
        if (!StdIn.isEmpty()) {
            String[] firstData = StdIn.readLine().split(",");
            String firstName = firstData[0];
            String firstArtist = firstData[1];
            int firstYear = Integer.parseInt(firstData[2]);
            int firstPop = Integer.parseInt(firstData[3]);
            String firstLink = firstData[4];

            Song lastSong = new Song(firstName, firstArtist, firstYear, firstPop, firstLink);
            SongNode lastSongNode = new SongNode(lastSong, null);

            newPlaylist.setSize(1);
            newPlaylist.setLast(lastSongNode);

            lastSongNode.setNext(lastSongNode);
        }

        while (!StdIn.isEmpty()) {
            newPlaylist.setSize(newPlaylist.getSize() + 1);

            String[] data = StdIn.readLine().split(",");
            String name = data[0];
            String artist = data[1];
            int year = Integer.parseInt(data[2]);
            int pop = Integer.parseInt(data[3]);
            String link = data[4];

            Song newSong = new Song(name, artist, year, pop, link);
            SongNode newSongNode = new SongNode(newSong, null); 

            newSongNode.setNext(newPlaylist.getLast().getNext());
            newPlaylist.getLast().setNext(newSongNode);
            newPlaylist.setLast(newPlaylist.getLast().getNext());
        }

        return newPlaylist; // update this line with your returning Playlist
    }

    /**
     * ****DO NOT**** UPDATE THIS METHOD
     * This method is already implemented for you. 
     * 
     * Adds a new playlist into the song library at a certain index.
     * 
     * 1. Calls createPlayList() with a file containing song information.
     * 2. Adds the new playlist created by createPlayList() into the songLibrary.
     * 
     * Note: initialize the songLibrary if it is null
     * 
     * @param filename the playlist information input file
     * @param playlistIndex the index of the location where the playlist will 
     * be added 
     */
    public void addPlaylist(String filename, int playlistIndex) {
        
        /* DO NOT UPDATE THIS METHOD */

        if ( songLibrary == null ) {
            songLibrary = new ArrayList<Playlist>();
        }
        if ( playlistIndex >= songLibrary.size() ) {
            songLibrary.add(createPlaylist(filename));
        } else {
            songLibrary.add(playlistIndex, createPlaylist(filename));
        }        
    }

    /**
     * ****DO NOT**** UPDATE THIS METHOD
     * This method is already implemented for you.
     * 
     * It takes a playlistIndex, and removes the playlist located at that index.
     * 
     * @param playlistIndex the index of the playlist to remove
     * @return true if the playlist has been deleted
     */
    public boolean removePlaylist(int playlistIndex) {
        /* DO NOT UPDATE THIS METHOD */

        if ( songLibrary == null || playlistIndex >= songLibrary.size() ) {
            return false;
        }

        songLibrary.remove(playlistIndex);
            
        return true;
    }
    
    /** 
     * 
     * Adds the playlists from many files into the songLibrary
     * 
     * 1. Initialize the songLibrary
     * 
     * 2. For each of the filenames
     *       add the playlist into songLibrary
     * 
     * The playlist will have the same index in songLibrary as it has in
     * the filenames array. For example if the playlist is being created
     * from the filename[i] it will be added to songLibrary[i]. 
     * Use the addPlaylist() method. 
     * 
     * @param filenames an array of the filenames of playlists that should be 
     * added to the library
     */
    public void addAllPlaylists(String[] filenames) {
           
        
        // WRITE YOUR CODE HERE
        if (filenames == null) {
            return; // Handle null input if needed
        }

        for (String filename : filenames) {
            Playlist playlist = loadPlaylistFromFile(filename); // You need to implement this function
            songLibrary.add(playlist);
        }
    }
    

    private Playlist loadPlaylistFromFile(String filename) {
        return null;
    }

    /**
     * This method adds a song to a specified playlist at a given position.
     * 
     * The first node of the circular linked list is at position 1, the 
     * second node is at position 2 and so forth.
     * 
     * Return true if the song can be added at the given position within the 
     * specified playlist (and thus has been added to the playlist), false 
     * otherwise (and the song will not be added). 
     * 
     * Increment the size of the playlist if the song has been successfully
     * added to the playlist.
     * 
     * @param playlistIndex the index where the playlist will be added
     * @param position the position inthe playlist to which the song 
     * is to be added 
     * @param song the song to add
     * @return true if the song can be added and therefore has been added, 
     * false otherwise. 
     */
    public boolean insertSong(int playlistIndex, int position, Song song) {
        // WRITE YOUR CODE HERE
        if (playlistIndex < 0 || playlistIndex >= songLibrary.size()) {
            return false; // Invalid playlist index
        }

      
        Playlist playlist = songLibrary.get(playlistIndex);

        if (position < 1) {
            return false; // Invalid position
        }

        PlaylistNode newNode = new PlaylistNode();

        if (playlist.isEmpty()) {
            // If the playlist is empty, the new node becomes the only node in the list
            playlist.setFirstNode(newNode);
            playlist.setFirstNode(newNode);
            newNode.setNext(newNode); // Circular reference
        } else {
            music.PlaylistNode current = playlist.getFirstNode();

            if (position == 1) {
                newNode.setNext(current);
                playlist.setFirstNode(newNode);
                playlist.getLast().setNext(newNode); // Update the circular reference
            } else {
                for (int i = 1; i < position - 1; i++) {
                    current = current.getNext();
                }

                newNode.setNext(current.getNext());
                current.setNext(newNode);

                if (position == playlist.getSize() + 1) {
                    playlist.setFirstNode(newNode); // Update the last node if inserting at the end
                    newNode.setNext(playlist.getFirstNode()); // Update circular reference
                }
            }
        }

        playlist.setSize(playlist.getSize() + 1);
        return true;
    }


    

    /**
     * This method removes a song at a specified playlist, if the song exists. 
     *
     * Use the .equals() method of the Song class to check if an element of 
     * the circular linkedlist matches the specified song.
     * 
     * Return true if the song is found in the playlist (and thus has been 
     * removed), false otherwise (and thus nothing is removed). 
     * 
     * Decrease the playlist size by one if the song has been successfully
     * removed from the playlist.
     * 
     * @param playlistIndex the playlist index within the songLibrary where 
     * the song is to be added.
     * @param song the song to remove.
     * @param songToRemove 
     * @return true if the song is present in the playlist and therefore has 
     * been removed, false otherwise.
     */
    public boolean removeSong(int playlistIndex, Song song, Object songToRemove) {
        // WRITE YOUR CODE HERE
        if (playlistIndex < 0 || playlistIndex >= songLibrary.size()) {
            return false; // Invalid playlist index
        }

        Playlist playlist = songLibrary.get(playlistIndex);

        if (playlist.isEmpty()) {
            return false; // Playlist is empty
        }

        SongNode current = playlist.getLast().getNext(); // Start from the first node
        SongNode previous = playlist.getLast();

        do {
            
            if (songToRemove.equals(current.getSong())) {
                // Found the song to remove
                if (current == previous.getNext()) {
                    // If there's only one node in the playlist
                    if (playlist.getSize() == 1) {
                        playlist.setLast(null);
                    } else {
                        previous.setNext(current.getNext());
                        if (current == playlist.getLast().getNext()) {
                            playlist.setLast(current.getNext());
                        }
                    }
                } else {
                    previous.setNext(current.getNext());
                    if (current == playlist.getLast().getNext()) {
                        playlist.setLast(current.getNext());
                    }
                }

                playlist.setSize(playlist.getSize() - 1);
                return true;
            }

            previous = current;
            current = current.getNext();
        } while (current != playlist.getLast().getNext());

        return false; // Song not found in the playlist
    }


       
         // update the return value
    

    /**
     * This method reverses the playlist located at playlistIndex
     * 
     * Each node in the circular linked list will point to the element that 
     * came before it.
     * 
     * After the list is reversed, the playlist located at playlistIndex will 
     * reference the first SongNode in the original playlist (new last).
     * 
     * @param playlistIndex the playlist to reverse
     */
    public void reversePlaylist(int playlistIndex) {
        // WRITE YOUR CODE HERE
        // Invalid playlist index
    if (playlistIndex < 0 || playlistIndex >= songLibrary.size()) {

        return;
    }

    Playlist playlistToReverse = songLibrary.get(playlistIndex);

    // Nothing to reverse for an empty playlist or a playlist with only one song.
    if (playlistToReverse.getSize() <= 1) {

        return;
    }

    SongNode current = playlistToReverse.getLast().getNext(); // Start from the first song
    SongNode previous = playlistToReverse.getLast(); // The last song becomes the new head

    for (int i = 0; i < playlistToReverse.getSize(); i++) {
        SongNode next = current.getNext();
        current.setNext(previous); // Reverse the "next" pointer of the current song
        previous = current;
        current = next;
    }

    // Update the playlist's last reference to the new first song (previous).
    playlistToReverse.setLast(previous);
}
    

    /**
     * This method merges two playlists.
     * 
     * Both playlists have songs in decreasing popularity order. The resulting 
     * playlist will also be in decreasing popularity order.
     * 
     * You may assume both playlists are already in decreasing popularity 
     * order. If the songs have the same popularity, add the song from the 
     * playlist with the lower playlistIndex first.
     * 
     * After the lists have been merged:
     *  - store the merged playlist at the lower playlistIndex
     *  - remove playlist at the higher playlistIndex 
     * 
     * 
     * @param playlistIndex1 the first playlist to merge into one playlist
     * @param playlistIndex2 the second playlist to merge into one playlist
     * @return 
     */
    public Playlist mergePlaylists(int playlistIndex1, int playlistIndex2) {
      
        // WRITE YOUR CODE HERE
         // Create a new playlist to store the merged songs
   Playlist mergedPlaylist = new Playlist(null, 0);
   Playlist playlist1 = createPlaylist(null);
   Playlist playlist2 = createPlaylist(null);
// Iterate through the songs in decreasing popularity order and add them to the merged playlist
   SongNode current1 = playlist1.getLast();

SongNode current2 = playlist2.getLast();
   while (current1 != null || current2 != null) {
       // Compare the popularity of songs and add the one with higher popularity to the merged playlist
       if (current1 != null && (current2 == null || current1.getSong().getPopularity() >= current2.getSong().getPopularity())) {
           // Add the song from playlist1 to the merged playlist
           mergedPlaylist.addSong(current1.getSong());
           current1 = current1.getNext();
       } else {
           // Add the song from playlist2 to the merged playlist
           mergedPlaylist.addSong(current2.getSong());
           current2 = current2.getNext();
       }
   }
   return mergedPlaylist;
}
    

    /**
     * This method shuffles a specified playlist using the following procedure:
     * 
     * 1. Create a new playlist to store the shuffled playlist in.
     * 
     * 2. While the size of the original playlist is not 0, randomly generate a number 
     * using StdRandom.uniformInt(1, size+1). Size contains the current number
     * of items in the original playlist.
     * 
     * 3. Remove the corresponding node from the original playlist and insert 
     * it into the END of the new playlist (1 being the first node, 2 being the 
     * second, etc). 
     * 
     * 4. Update the old playlist with the new shuffled playlist.
     *    
     * @param index the playlist to shuffle in songLibrary
     */

    public void shufflePlaylist(int playlistIndex) {
        // WRITE YOUR CODE HERE
        if (playlistIndex < 0 || playlistIndex >= songLibrary.size()) {
            System.out.println("Invalid playlist index.");
            return;
        }

        List<Song> playlist = (List<Song>) songLibrary.get(playlistIndex);

        if (playlist.isEmpty()) {
            System.out.println("Playlist is empty.");
            return;
        }

        List<Song> newPlaylist = new ArrayList<>();
        Random random = new Random();

        while (!playlist.isEmpty()) {
            int randomIndex = random.nextInt(playlist.size());
            Song randomSong = playlist.remove(randomIndex);
            newPlaylist.add(randomSong);
        }

        // Replace the original playlist with the shuffled playlist
        songLibrary.set(playlistIndex, (Playlist) newPlaylist);
    }

    

    /**
     * This method sorts a specified playlist using linearithmic sort.
     * 
     * Set the playlist located at the corresponding playlistIndex
     * in decreasing popularity index order.
     * 
     * This method should  use a sort that has O(nlogn), such as with merge sort.
     * 
     * @param playlistIndex the playlist to shuffle
     */
    public void sortPlaylist ( int playlistIndex ) {

        // WRITE YOUR CODE HERE

    }
    /**
     * ****DO NOT**** UPDATE THIS METHOD
     * Plays playlist by index; can use this method to debug.
     * 
     * @param playlistIndex the playlist to print
     * @param repeats number of times to repeat playlist
     * @throws InterruptedException
     */
    public void playPlaylist(int playlistIndex, int repeats) {
        /* DO NOT UPDATE THIS METHOD */

        final String NO_SONG_MSG = " has no link to a song! Playing next...";
        if (songLibrary.get(playlistIndex).getLast() == null) {
            StdOut.println("Nothing to play.");
            return;
        }

        SongNode ptr = songLibrary.get(playlistIndex).getLast().getNext(), first = ptr;

        do {
            StdOut.print("\r" + ptr.getSong().toString());
            if (ptr.getSong().getLink() != null) {
                StdAudio.play(ptr.getSong().getLink());
                for (int ii = 0; ii < ptr.getSong().toString().length(); ii++)
                    StdOut.print("\b \b");
            }
            else {
                StdOut.print(NO_SONG_MSG);
                try {
                    Thread.sleep(2000);
                } catch(InterruptedException ex) {
                    ex.printStackTrace();
                }
                for (int ii = 0; ii < NO_SONG_MSG.length(); ii++)
                    StdOut.print("\b \b");
            }

            ptr = ptr.getNext();
            if (ptr == first) repeats--;
        } while (ptr != first || repeats > 0);
    }

    /**
     * ****DO NOT**** UPDATE THIS METHOD
     * Prints playlist by index; can use this method to debug.
     * 
     * @param playlistIndex the playlist to print
     */
    public void printPlaylist(int playlistIndex) {
        StdOut.printf("%nPlaylist at index %d (%d song(s)):%n", playlistIndex, songLibrary.get(playlistIndex).getSize());
        if (songLibrary.get(playlistIndex).getLast() == null) {
            StdOut.println("EMPTY");
            return;
        }
        SongNode ptr;
        for (ptr = songLibrary.get(playlistIndex).getLast().getNext(); ptr != songLibrary.get(playlistIndex).getLast(); ptr = ptr.getNext() ) {
            StdOut.print(ptr.getSong().toString() + " -> ");
        }
        if (ptr == songLibrary.get(playlistIndex).getLast()) {
            StdOut.print(songLibrary.get(playlistIndex).getLast().getSong().toString() + " - POINTS TO FRONT");
        }
        StdOut.println();
    }

    public void printLibrary() {
        if (songLibrary.size() == 0) {
            StdOut.println("\nYour library is empty!");
        } else {
                for (int ii = 0; ii < songLibrary.size(); ii++) {
                printPlaylist(ii);
            }
        }
    }

    /*
     * Used to get and set objects.
     * DO NOT edit.
     */
     public ArrayList<Playlist> getPlaylists() { return songLibrary; }
     public void setPlaylists(ArrayList<Playlist> p) { songLibrary = p; }
}

